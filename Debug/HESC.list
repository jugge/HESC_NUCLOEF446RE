
HESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f84  08000f84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f84  08000f84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f84  08000f84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f84  08000f84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f84  08000f84  00010f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f88  08000f88  00010f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  2000000c  08000f98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000f98  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006bd4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f3e  00000000  00000000  00026c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  00027b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  00028268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020a1e  00000000  00000000  000288f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005393  00000000  00000000  00049316  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdd66  00000000  00000000  0004e6a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c40f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd0  00000000  00000000  0011c48c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f6c 	.word	0x08000f6c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000f6c 	.word	0x08000f6c

08000204 <main>:
#include "main.h"
#include "motor_control_wrapper.h"

TIM_HandleTypeDef htimer6;

int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	HAL_Init();
 8000208:	f000 fa8e 	bl	8000728 <HAL_Init>
	SystemClockConfig();
 800020c:	f000 f82e 	bl	800026c <SystemClockConfig>
	GPIO_Init();
 8000210:	f000 f834 	bl	800027c <GPIO_Init>
	TIMER6_Init();
 8000214:	f000 f868 	bl	80002e8 <TIMER6_Init>
	//Start the timer
	HAL_TIM_Base_Start(&htimer6);
 8000218:	4813      	ldr	r0, [pc, #76]	; (8000268 <main+0x64>)
 800021a:	f000 fdbf 	bl	8000d9c <HAL_TIM_Base_Start>

	for(;;){
		//TODO: Make the test sequence delay controlled and only run when in certain debug mode.
		//Test Sequence
		FULL_SPEED_AHEAD();
 800021e:	f000 f929 	bl	8000474 <ForwardGPIO>
		hundredms_wt(10);
 8000222:	200a      	movs	r0, #10
 8000224:	f000 f882 	bl	800032c <hundredms_wt>
		FULL_STOP();
 8000228:	f000 f8ee 	bl	8000408 <StopMotorsGPIO>
		hundredms_wt(10);
 800022c:	200a      	movs	r0, #10
 800022e:	f000 f87d 	bl	800032c <hundredms_wt>
		FULL_SPEED_REVERSE();
 8000232:	f000 f955 	bl	80004e0 <ReverseGPIO>
		hundredms_wt(10);
 8000236:	200a      	movs	r0, #10
 8000238:	f000 f878 	bl	800032c <hundredms_wt>
		FULL_STOP();
 800023c:	f000 f8e4 	bl	8000408 <StopMotorsGPIO>
		hundredms_wt(10);
 8000240:	200a      	movs	r0, #10
 8000242:	f000 f873 	bl	800032c <hundredms_wt>
		HARD_TURN_LEFT();
 8000246:	f000 f981 	bl	800054c <TurnLeftGPIO>
		hundredms_wt(10);
 800024a:	200a      	movs	r0, #10
 800024c:	f000 f86e 	bl	800032c <hundredms_wt>
		HARD_TURN_RIGHT();
 8000250:	f000 f9b2 	bl	80005b8 <TurnRightGPIO>
		hundredms_wt(10);
 8000254:	200a      	movs	r0, #10
 8000256:	f000 f869 	bl	800032c <hundredms_wt>
		FULL_STOP();
 800025a:	f000 f8d5 	bl	8000408 <StopMotorsGPIO>
		hundredms_wt(10);
 800025e:	200a      	movs	r0, #10
 8000260:	f000 f864 	bl	800032c <hundredms_wt>
		FULL_SPEED_AHEAD();
 8000264:	e7db      	b.n	800021e <main+0x1a>
 8000266:	bf00      	nop
 8000268:	20000028 	.word	0x20000028

0800026c <SystemClockConfig>:


	return 0;
}

void SystemClockConfig(void) {
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0


}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
	...

0800027c <GPIO_Init>:


void GPIO_Init(void){
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
	/*
	 * Enable GPIOA Clk
	 */

	__GPIOA_CLK_ENABLE();
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
 8000286:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <GPIO_Init+0x64>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <GPIO_Init+0x64>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <GPIO_Init+0x64>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	68bb      	ldr	r3, [r7, #8]
	__GPIOB_CLK_ENABLE();
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <GPIO_Init+0x64>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <GPIO_Init+0x64>)
 80002a8:	f043 0302 	orr.w	r3, r3, #2
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <GPIO_Init+0x64>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b2:	f003 0302 	and.w	r3, r3, #2
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]

	/*
	 * GPIO Sections
	 */
	MotorControlGPIO_Init();
 80002ba:	f000 f857 	bl	800036c <MotorControlGPIO_Init>

	/* led gpio init */
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80002be:	2320      	movs	r3, #32
 80002c0:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	613b      	str	r3, [r7, #16]
	ledgpio.Pull = GPIO_NOPULL;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80002ca:	f107 030c 	add.w	r3, r7, #12
 80002ce:	4619      	mov	r1, r3
 80002d0:	4804      	ldr	r0, [pc, #16]	; (80002e4 <GPIO_Init+0x68>)
 80002d2:	f000 fb8d 	bl	80009f0 <HAL_GPIO_Init>

}
 80002d6:	bf00      	nop
 80002d8:	3720      	adds	r7, #32
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020000 	.word	0x40020000

080002e8 <TIMER6_Init>:


void TIMER6_Init(void){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <TIMER6_Init+0x2c>)
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <TIMER6_Init+0x30>)
 80002f0:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 24;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <TIMER6_Init+0x2c>)
 80002f4:	2218      	movs	r2, #24
 80002f6:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 64000-1;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <TIMER6_Init+0x2c>)
 80002fa:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80002fe:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htimer6) != HAL_OK){
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <TIMER6_Init+0x2c>)
 8000302:	f000 fd20 	bl	8000d46 <HAL_TIM_Base_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <TIMER6_Init+0x28>
		Error_handler();
 800030c:	f000 f806 	bl	800031c <Error_handler>
	}
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000028 	.word	0x20000028
 8000318:	40001000 	.word	0x40001000

0800031c <Error_handler>:


void Error_handler(void) {
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	//printf("error");
	//return 0;
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <hundredms_wt>:


void hundredms_wt(int deciseconds) {
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	for (int i=0;i<deciseconds;i++) {
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	e00c      	b.n	8000354 <hundredms_wt+0x28>
		while( ! (TIM6->SR & TIM_SR_UIF));
 800033a:	bf00      	nop
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <hundredms_wt+0x3c>)
 800033e:	691b      	ldr	r3, [r3, #16]
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0f9      	beq.n	800033c <hundredms_wt+0x10>
		TIM6->SR = 0;
 8000348:	4b07      	ldr	r3, [pc, #28]	; (8000368 <hundredms_wt+0x3c>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
	for (int i=0;i<deciseconds;i++) {
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	3301      	adds	r3, #1
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	429a      	cmp	r2, r3
 800035a:	dbee      	blt.n	800033a <hundredms_wt+0xe>
	}
}
 800035c:	bf00      	nop
 800035e:	3714      	adds	r7, #20
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40001000 	.word	0x40001000

0800036c <MotorControlGPIO_Init>:
#define REAR_RIGHT_WHEEL_FORWARD_PIN GPIO_PIN_10
#define REAR_RIGHT_WHEEL_REVERSE_PIN GPIO_PIN_11
#define REAR_LEFT_WHEEL_FORWARD_PIN GPIO_PIN_8
#define REAR_LEFT_WHEEL_REVERSE_PIN GPIO_PIN_9

void MotorControlGPIO_Init(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0

	/*
	 *  MOTOR CONTROL GPIO
	 */

	gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	60bb      	str	r3, [r7, #8]
	gpio_init.Speed = GPIO_SPEED_LOW;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
	gpio_init.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
	/*
	 * Front Wheel Left
	 * PA0 - Forward
	 * PA1 - Reverse
	 */
	gpio_init.Pin = GPIO_PIN_0;
 800037e:	2301      	movs	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &gpio_init);
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	481e      	ldr	r0, [pc, #120]	; (8000400 <MotorControlGPIO_Init+0x94>)
 8000388:	f000 fb32 	bl	80009f0 <HAL_GPIO_Init>
	gpio_init.Pin = GPIO_PIN_1;
 800038c:	2302      	movs	r3, #2
 800038e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &gpio_init);
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4619      	mov	r1, r3
 8000394:	481a      	ldr	r0, [pc, #104]	; (8000400 <MotorControlGPIO_Init+0x94>)
 8000396:	f000 fb2b 	bl	80009f0 <HAL_GPIO_Init>
	/*
	 * Front Wheel Right
	 * PB10 - Forward
	 * PB2 - Reverse
	 */
	gpio_init.Pin = GPIO_PIN_10;
 800039a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOB, &gpio_init);
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4619      	mov	r1, r3
 80003a4:	4817      	ldr	r0, [pc, #92]	; (8000404 <MotorControlGPIO_Init+0x98>)
 80003a6:	f000 fb23 	bl	80009f0 <HAL_GPIO_Init>
	gpio_init.Pin = GPIO_PIN_2;
 80003aa:	2304      	movs	r3, #4
 80003ac:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOB, &gpio_init);
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	4814      	ldr	r0, [pc, #80]	; (8000404 <MotorControlGPIO_Init+0x98>)
 80003b4:	f000 fb1c 	bl	80009f0 <HAL_GPIO_Init>
	/*
	 * Rear Wheel Left
	 * PA8 - Forward
	 * PA9 - Reverse
	 */
	gpio_init.Pin = GPIO_PIN_8;
 80003b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003bc:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &gpio_init);
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4619      	mov	r1, r3
 80003c2:	480f      	ldr	r0, [pc, #60]	; (8000400 <MotorControlGPIO_Init+0x94>)
 80003c4:	f000 fb14 	bl	80009f0 <HAL_GPIO_Init>
	gpio_init.Pin = GPIO_PIN_9;
 80003c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003cc:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &gpio_init);
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4619      	mov	r1, r3
 80003d2:	480b      	ldr	r0, [pc, #44]	; (8000400 <MotorControlGPIO_Init+0x94>)
 80003d4:	f000 fb0c 	bl	80009f0 <HAL_GPIO_Init>
	/*
	 * Rear Wheel Right
	 * PA10 - Forward
	 * PA11 - Reverse
	 */
	gpio_init.Pin = GPIO_PIN_10;
 80003d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003dc:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &gpio_init);
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4807      	ldr	r0, [pc, #28]	; (8000400 <MotorControlGPIO_Init+0x94>)
 80003e4:	f000 fb04 	bl	80009f0 <HAL_GPIO_Init>
	gpio_init.Pin = GPIO_PIN_11;
 80003e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003ec:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &gpio_init);
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	4619      	mov	r1, r3
 80003f2:	4803      	ldr	r0, [pc, #12]	; (8000400 <MotorControlGPIO_Init+0x94>)
 80003f4:	f000 fafc 	bl	80009f0 <HAL_GPIO_Init>

	/*
	 * END OF MOTOR CONTROL GPIO
	 */

}
 80003f8:	bf00      	nop
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40020000 	.word	0x40020000
 8000404:	40020400 	.word	0x40020400

08000408 <StopMotorsGPIO>:
void MotorControlGPIOTest(void){


}

void StopMotorsGPIO(void){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FRONT_RIGHT_WHEEL_PORT, FRONT_RIGHT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2101      	movs	r1, #1
 8000410:	4816      	ldr	r0, [pc, #88]	; (800046c <StopMotorsGPIO+0x64>)
 8000412:	f000 fc7f 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_LEFT_WHEEL_PORT, FRONT_LEFT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041c:	4814      	ldr	r0, [pc, #80]	; (8000470 <StopMotorsGPIO+0x68>)
 800041e:	f000 fc79 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_RIGHT_WHEEL_PORT, REAR_RIGHT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000428:	4810      	ldr	r0, [pc, #64]	; (800046c <StopMotorsGPIO+0x64>)
 800042a:	f000 fc73 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_LEFT_WHEEL_PORT, REAR_LEFT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <StopMotorsGPIO+0x64>)
 8000436:	f000 fc6d 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_RIGHT_WHEEL_PORT, FRONT_RIGHT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2102      	movs	r1, #2
 800043e:	480b      	ldr	r0, [pc, #44]	; (800046c <StopMotorsGPIO+0x64>)
 8000440:	f000 fc68 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_LEFT_WHEEL_PORT, FRONT_LEFT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2104      	movs	r1, #4
 8000448:	4809      	ldr	r0, [pc, #36]	; (8000470 <StopMotorsGPIO+0x68>)
 800044a:	f000 fc63 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_RIGHT_WHEEL_PORT, REAR_RIGHT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000454:	4805      	ldr	r0, [pc, #20]	; (800046c <StopMotorsGPIO+0x64>)
 8000456:	f000 fc5d 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_LEFT_WHEEL_PORT, REAR_LEFT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000460:	4802      	ldr	r0, [pc, #8]	; (800046c <StopMotorsGPIO+0x64>)
 8000462:	f000 fc57 	bl	8000d14 <HAL_GPIO_WritePin>
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40020000 	.word	0x40020000
 8000470:	40020400 	.word	0x40020400

08000474 <ForwardGPIO>:

void ForwardGPIO(void){
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FRONT_RIGHT_WHEEL_PORT, FRONT_RIGHT_WHEEL_FORWARD_PIN, GPIO_PIN_SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2101      	movs	r1, #1
 800047c:	4816      	ldr	r0, [pc, #88]	; (80004d8 <ForwardGPIO+0x64>)
 800047e:	f000 fc49 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_LEFT_WHEEL_PORT, FRONT_LEFT_WHEEL_FORWARD_PIN, GPIO_PIN_SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000488:	4814      	ldr	r0, [pc, #80]	; (80004dc <ForwardGPIO+0x68>)
 800048a:	f000 fc43 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_RIGHT_WHEEL_PORT, REAR_RIGHT_WHEEL_FORWARD_PIN, GPIO_PIN_SET);
 800048e:	2201      	movs	r2, #1
 8000490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000494:	4810      	ldr	r0, [pc, #64]	; (80004d8 <ForwardGPIO+0x64>)
 8000496:	f000 fc3d 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_LEFT_WHEEL_PORT, REAR_LEFT_WHEEL_FORWARD_PIN, GPIO_PIN_SET);
 800049a:	2201      	movs	r2, #1
 800049c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a0:	480d      	ldr	r0, [pc, #52]	; (80004d8 <ForwardGPIO+0x64>)
 80004a2:	f000 fc37 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_RIGHT_WHEEL_PORT, FRONT_RIGHT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2102      	movs	r1, #2
 80004aa:	480b      	ldr	r0, [pc, #44]	; (80004d8 <ForwardGPIO+0x64>)
 80004ac:	f000 fc32 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_LEFT_WHEEL_PORT, FRONT_LEFT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2104      	movs	r1, #4
 80004b4:	4809      	ldr	r0, [pc, #36]	; (80004dc <ForwardGPIO+0x68>)
 80004b6:	f000 fc2d 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_RIGHT_WHEEL_PORT, REAR_RIGHT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <ForwardGPIO+0x64>)
 80004c2:	f000 fc27 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_LEFT_WHEEL_PORT, REAR_LEFT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <ForwardGPIO+0x64>)
 80004ce:	f000 fc21 	bl	8000d14 <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40020000 	.word	0x40020000
 80004dc:	40020400 	.word	0x40020400

080004e0 <ReverseGPIO>:

void ReverseGPIO(void){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FRONT_RIGHT_WHEEL_PORT, FRONT_RIGHT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2101      	movs	r1, #1
 80004e8:	4816      	ldr	r0, [pc, #88]	; (8000544 <ReverseGPIO+0x64>)
 80004ea:	f000 fc13 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_LEFT_WHEEL_PORT, FRONT_LEFT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f4:	4814      	ldr	r0, [pc, #80]	; (8000548 <ReverseGPIO+0x68>)
 80004f6:	f000 fc0d 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_RIGHT_WHEEL_PORT, REAR_RIGHT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000500:	4810      	ldr	r0, [pc, #64]	; (8000544 <ReverseGPIO+0x64>)
 8000502:	f000 fc07 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_LEFT_WHEEL_PORT, REAR_LEFT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <ReverseGPIO+0x64>)
 800050e:	f000 fc01 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_RIGHT_WHEEL_PORT, FRONT_RIGHT_WHEEL_REVERSE_PIN, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2102      	movs	r1, #2
 8000516:	480b      	ldr	r0, [pc, #44]	; (8000544 <ReverseGPIO+0x64>)
 8000518:	f000 fbfc 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_LEFT_WHEEL_PORT, FRONT_LEFT_WHEEL_REVERSE_PIN, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2104      	movs	r1, #4
 8000520:	4809      	ldr	r0, [pc, #36]	; (8000548 <ReverseGPIO+0x68>)
 8000522:	f000 fbf7 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_RIGHT_WHEEL_PORT, REAR_RIGHT_WHEEL_REVERSE_PIN, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <ReverseGPIO+0x64>)
 800052e:	f000 fbf1 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_LEFT_WHEEL_PORT, REAR_LEFT_WHEEL_REVERSE_PIN, GPIO_PIN_SET);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <ReverseGPIO+0x64>)
 800053a:	f000 fbeb 	bl	8000d14 <HAL_GPIO_WritePin>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40020000 	.word	0x40020000
 8000548:	40020400 	.word	0x40020400

0800054c <TurnLeftGPIO>:

void TurnLeftGPIO(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FRONT_RIGHT_WHEEL_PORT, FRONT_RIGHT_WHEEL_FORWARD_PIN, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2101      	movs	r1, #1
 8000554:	4816      	ldr	r0, [pc, #88]	; (80005b0 <TurnLeftGPIO+0x64>)
 8000556:	f000 fbdd 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_LEFT_WHEEL_PORT, FRONT_LEFT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000560:	4814      	ldr	r0, [pc, #80]	; (80005b4 <TurnLeftGPIO+0x68>)
 8000562:	f000 fbd7 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_RIGHT_WHEEL_PORT, REAR_RIGHT_WHEEL_FORWARD_PIN, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056c:	4810      	ldr	r0, [pc, #64]	; (80005b0 <TurnLeftGPIO+0x64>)
 800056e:	f000 fbd1 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_LEFT_WHEEL_PORT, REAR_LEFT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <TurnLeftGPIO+0x64>)
 800057a:	f000 fbcb 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_RIGHT_WHEEL_PORT, FRONT_RIGHT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2102      	movs	r1, #2
 8000582:	480b      	ldr	r0, [pc, #44]	; (80005b0 <TurnLeftGPIO+0x64>)
 8000584:	f000 fbc6 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRONT_LEFT_WHEEL_PORT, FRONT_LEFT_WHEEL_REVERSE_PIN, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2104      	movs	r1, #4
 800058c:	4809      	ldr	r0, [pc, #36]	; (80005b4 <TurnLeftGPIO+0x68>)
 800058e:	f000 fbc1 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_RIGHT_WHEEL_PORT, REAR_RIGHT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <TurnLeftGPIO+0x64>)
 800059a:	f000 fbbb 	bl	8000d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REAR_LEFT_WHEEL_PORT, REAR_LEFT_WHEEL_REVERSE_PIN, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <TurnLeftGPIO+0x64>)
 80005a6:	f000 fbb5 	bl	8000d14 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000
 80005b4:	40020400 	.word	0x40020400

080005b8 <TurnRightGPIO>:

void TurnRightGPIO(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FRONT_RIGHT_WHEEL_PORT, FRONT_RIGHT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	4816      	ldr	r0, [pc, #88]	; (800061c <TurnRightGPIO+0x64>)
 80005c2:	f000 fba7 	bl	8000d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FRONT_LEFT_WHEEL_PORT, FRONT_LEFT_WHEEL_FORWARD_PIN, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005cc:	4814      	ldr	r0, [pc, #80]	; (8000620 <TurnRightGPIO+0x68>)
 80005ce:	f000 fba1 	bl	8000d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(REAR_RIGHT_WHEEL_PORT, REAR_RIGHT_WHEEL_FORWARD_PIN, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d8:	4810      	ldr	r0, [pc, #64]	; (800061c <TurnRightGPIO+0x64>)
 80005da:	f000 fb9b 	bl	8000d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(REAR_LEFT_WHEEL_PORT, REAR_LEFT_WHEEL_FORWARD_PIN, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <TurnRightGPIO+0x64>)
 80005e6:	f000 fb95 	bl	8000d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FRONT_RIGHT_WHEEL_PORT, FRONT_RIGHT_WHEEL_REVERSE_PIN, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2102      	movs	r1, #2
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <TurnRightGPIO+0x64>)
 80005f0:	f000 fb90 	bl	8000d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FRONT_LEFT_WHEEL_PORT, FRONT_LEFT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2104      	movs	r1, #4
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <TurnRightGPIO+0x68>)
 80005fa:	f000 fb8b 	bl	8000d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(REAR_RIGHT_WHEEL_PORT, REAR_RIGHT_WHEEL_REVERSE_PIN, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <TurnRightGPIO+0x64>)
 8000606:	f000 fb85 	bl	8000d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(REAR_LEFT_WHEEL_PORT, REAR_LEFT_WHEEL_REVERSE_PIN, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <TurnRightGPIO+0x64>)
 8000612:	f000 fb7f 	bl	8000d14 <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020000 	.word	0x40020000
 8000620:	40020400 	.word	0x40020400

08000624 <HAL_MspInit>:
 */

#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_tim.h"

void HAL_MspInit(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
//Here we will do low level processor specific inits
	//1. Setup priority grouping
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 f99f 	bl	800096c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions
	SCB->SHCSR |= 0x7 << 16; //usage_fault, memory_fault, bus_fault exceptions
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <HAL_MspInit+0x40>)
 8000630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <HAL_MspInit+0x40>)
 8000634:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000638:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Congfigure the priority for the system exceptions.
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	f06f 000b 	mvn.w	r0, #11
 8000642:	f000 f99e 	bl	8000982 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	f06f 000a 	mvn.w	r0, #10
 800064e:	f000 f998 	bl	8000982 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	f06f 0009 	mvn.w	r0, #9
 800065a:	f000 f992 	bl	8000982 <HAL_NVIC_SetPriority>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	//First enable the clock for TIM6
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <HAL_TIM_Base_MspInit+0x3c>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <HAL_TIM_Base_MspInit+0x3c>)
 800067a:	f043 0310 	orr.w	r3, r3, #16
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_TIM_Base_MspInit+0x3c>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 0310 	and.w	r3, r3, #16
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]

	//Enable IRQ SETTINGS
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800068c:	2036      	movs	r0, #54	; 0x36
 800068e:	f000 f994 	bl	80009ba <HAL_NVIC_EnableIRQ>

	//Configure the priority for this IRQ number
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	210f      	movs	r1, #15
 8000696:	2036      	movs	r0, #54	; 0x36
 8000698:	f000 f973 	bl	8000982 <HAL_NVIC_SetPriority>
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800

080006a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <SystemInit+0x28>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <SystemInit+0x28>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <SystemInit+0x28>)
 80006be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c2:	609a      	str	r2, [r3, #8]
#endif
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800070c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006da:	e003      	b.n	80006e4 <LoopCopyDataInit>

080006dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006e2:	3104      	adds	r1, #4

080006e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006ec:	d3f6      	bcc.n	80006dc <CopyDataInit>
  ldr  r2, =_sbss
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006f0:	e002      	b.n	80006f8 <LoopFillZerobss>

080006f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006f4:	f842 3b04 	str.w	r3, [r2], #4

080006f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006fc:	d3f9      	bcc.n	80006f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006fe:	f7ff ffd3 	bl	80006a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000702:	f000 fc0f 	bl	8000f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000706:	f7ff fd7d 	bl	8000204 <main>
  bx  lr    
 800070a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800070c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000710:	08000f8c 	.word	0x08000f8c
  ldr  r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000718:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800071c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000720:	20000068 	.word	0x20000068

08000724 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC_IRQHandler>
	...

08000728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_Init+0x40>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <HAL_Init+0x40>)
 8000732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_Init+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_Init+0x40>)
 800073e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_Init+0x40>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_Init+0x40>)
 800074a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f90b 	bl	800096c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f808 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075c:	f7ff ff62 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023c00 	.word	0x40023c00

0800076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_InitTick+0x54>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x58>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	fbb3 f3f1 	udiv	r3, r3, r1
 8000786:	fbb2 f3f3 	udiv	r3, r2, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f923 	bl	80009d6 <HAL_SYSTICK_Config>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e00e      	b.n	80007b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d80a      	bhi.n	80007b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a0:	2200      	movs	r2, #0
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f000 f8eb 	bl	8000982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <HAL_InitTick+0x5c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000004 	.word	0x20000004

080007cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fe:	4a04      	ldr	r2, [pc, #16]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	60d3      	str	r3, [r2, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <__NVIC_GetPriorityGrouping+0x18>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	f003 0307 	and.w	r3, r3, #7
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	2b00      	cmp	r3, #0
 8000840:	db0b      	blt.n	800085a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f003 021f 	and.w	r2, r3, #31
 8000848:	4907      	ldr	r1, [pc, #28]	; (8000868 <__NVIC_EnableIRQ+0x38>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	095b      	lsrs	r3, r3, #5
 8000850:	2001      	movs	r0, #1
 8000852:	fa00 f202 	lsl.w	r2, r0, r2
 8000856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	; (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	; 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000938:	d301      	bcc.n	800093e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093a:	2301      	movs	r3, #1
 800093c:	e00f      	b.n	800095e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <SysTick_Config+0x40>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000946:	210f      	movs	r1, #15
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f7ff ff8e 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <SysTick_Config+0x40>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SysTick_Config+0x40>)
 8000958:	2207      	movs	r2, #7
 800095a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ff29 	bl	80007cc <__NVIC_SetPriorityGrouping>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000994:	f7ff ff3e 	bl	8000814 <__NVIC_GetPriorityGrouping>
 8000998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	6978      	ldr	r0, [r7, #20]
 80009a0:	f7ff ff8e 	bl	80008c0 <NVIC_EncodePriority>
 80009a4:	4602      	mov	r2, r0
 80009a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff5d 	bl	800086c <__NVIC_SetPriority>
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff31 	bl	8000830 <__NVIC_EnableIRQ>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffa2 	bl	8000928 <SysTick_Config>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	e165      	b.n	8000cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	f040 8154 	bne.w	8000cd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d00b      	beq.n	8000a4a <HAL_GPIO_Init+0x5a>
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d007      	beq.n	8000a4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a3e:	2b11      	cmp	r3, #17
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b12      	cmp	r3, #18
 8000a48:	d130      	bne.n	8000aac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	68da      	ldr	r2, [r3, #12]
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a80:	2201      	movs	r2, #1
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	091b      	lsrs	r3, r3, #4
 8000a96:	f003 0201 	and.w	r2, r3, #1
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0xfc>
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b12      	cmp	r3, #18
 8000aea:	d123      	bne.n	8000b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	08da      	lsrs	r2, r3, #3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3208      	adds	r2, #8
 8000af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	f003 0307 	and.w	r3, r3, #7
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	220f      	movs	r2, #15
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	691a      	ldr	r2, [r3, #16]
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	08da      	lsrs	r2, r3, #3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3208      	adds	r2, #8
 8000b2e:	69b9      	ldr	r1, [r7, #24]
 8000b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	2203      	movs	r2, #3
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0203 	and.w	r2, r3, #3
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 80ae 	beq.w	8000cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b5c      	ldr	r3, [pc, #368]	; (8000cec <HAL_GPIO_Init+0x2fc>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a5b      	ldr	r2, [pc, #364]	; (8000cec <HAL_GPIO_Init+0x2fc>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b59      	ldr	r3, [pc, #356]	; (8000cec <HAL_GPIO_Init+0x2fc>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b92:	4a57      	ldr	r2, [pc, #348]	; (8000cf0 <HAL_GPIO_Init+0x300>)
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	3302      	adds	r3, #2
 8000b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	220f      	movs	r2, #15
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4e      	ldr	r2, [pc, #312]	; (8000cf4 <HAL_GPIO_Init+0x304>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d025      	beq.n	8000c0a <HAL_GPIO_Init+0x21a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a4d      	ldr	r2, [pc, #308]	; (8000cf8 <HAL_GPIO_Init+0x308>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d01f      	beq.n	8000c06 <HAL_GPIO_Init+0x216>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a4c      	ldr	r2, [pc, #304]	; (8000cfc <HAL_GPIO_Init+0x30c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d019      	beq.n	8000c02 <HAL_GPIO_Init+0x212>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a4b      	ldr	r2, [pc, #300]	; (8000d00 <HAL_GPIO_Init+0x310>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d013      	beq.n	8000bfe <HAL_GPIO_Init+0x20e>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a4a      	ldr	r2, [pc, #296]	; (8000d04 <HAL_GPIO_Init+0x314>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d00d      	beq.n	8000bfa <HAL_GPIO_Init+0x20a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a49      	ldr	r2, [pc, #292]	; (8000d08 <HAL_GPIO_Init+0x318>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d007      	beq.n	8000bf6 <HAL_GPIO_Init+0x206>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a48      	ldr	r2, [pc, #288]	; (8000d0c <HAL_GPIO_Init+0x31c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_GPIO_Init+0x202>
 8000bee:	2306      	movs	r3, #6
 8000bf0:	e00c      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	e00a      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	e008      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e004      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e002      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e000      	b.n	8000c0c <HAL_GPIO_Init+0x21c>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	69fa      	ldr	r2, [r7, #28]
 8000c0e:	f002 0203 	and.w	r2, r2, #3
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	4093      	lsls	r3, r2
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c1c:	4934      	ldr	r1, [pc, #208]	; (8000cf0 <HAL_GPIO_Init+0x300>)
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c2a:	4b39      	ldr	r3, [pc, #228]	; (8000d10 <HAL_GPIO_Init+0x320>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c4e:	4a30      	ldr	r2, [pc, #192]	; (8000d10 <HAL_GPIO_Init+0x320>)
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c54:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <HAL_GPIO_Init+0x320>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c78:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <HAL_GPIO_Init+0x320>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c7e:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <HAL_GPIO_Init+0x320>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <HAL_GPIO_Init+0x320>)
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_GPIO_Init+0x320>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ccc:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_GPIO_Init+0x320>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	2b0f      	cmp	r3, #15
 8000cdc:	f67f ae96 	bls.w	8000a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3724      	adds	r7, #36	; 0x24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40013800 	.word	0x40013800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40021400 	.word	0x40021400
 8000d0c:	40021800 	.word	0x40021800
 8000d10:	40013c00 	.word	0x40013c00

08000d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
 8000d20:	4613      	mov	r3, r2
 8000d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d24:	787b      	ldrb	r3, [r7, #1]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000d30:	e003      	b.n	8000d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	041a      	lsls	r2, r3, #16
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	619a      	str	r2, [r3, #24]
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e01d      	b.n	8000d94 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d106      	bne.n	8000d72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff fc7b 	bl	8000668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2202      	movs	r2, #2
 8000d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3304      	adds	r3, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4610      	mov	r0, r2
 8000d86:	f000 f82d 	bl	8000de4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2202      	movs	r2, #2
 8000da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d007      	beq.n	8000dce <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f042 0201 	orr.w	r2, r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a40      	ldr	r2, [pc, #256]	; (8000ef8 <TIM_Base_SetConfig+0x114>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d013      	beq.n	8000e24 <TIM_Base_SetConfig+0x40>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e02:	d00f      	beq.n	8000e24 <TIM_Base_SetConfig+0x40>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a3d      	ldr	r2, [pc, #244]	; (8000efc <TIM_Base_SetConfig+0x118>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d00b      	beq.n	8000e24 <TIM_Base_SetConfig+0x40>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a3c      	ldr	r2, [pc, #240]	; (8000f00 <TIM_Base_SetConfig+0x11c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d007      	beq.n	8000e24 <TIM_Base_SetConfig+0x40>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a3b      	ldr	r2, [pc, #236]	; (8000f04 <TIM_Base_SetConfig+0x120>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d003      	beq.n	8000e24 <TIM_Base_SetConfig+0x40>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a3a      	ldr	r2, [pc, #232]	; (8000f08 <TIM_Base_SetConfig+0x124>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d108      	bne.n	8000e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a2f      	ldr	r2, [pc, #188]	; (8000ef8 <TIM_Base_SetConfig+0x114>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d02b      	beq.n	8000e96 <TIM_Base_SetConfig+0xb2>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e44:	d027      	beq.n	8000e96 <TIM_Base_SetConfig+0xb2>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a2c      	ldr	r2, [pc, #176]	; (8000efc <TIM_Base_SetConfig+0x118>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d023      	beq.n	8000e96 <TIM_Base_SetConfig+0xb2>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a2b      	ldr	r2, [pc, #172]	; (8000f00 <TIM_Base_SetConfig+0x11c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d01f      	beq.n	8000e96 <TIM_Base_SetConfig+0xb2>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a2a      	ldr	r2, [pc, #168]	; (8000f04 <TIM_Base_SetConfig+0x120>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d01b      	beq.n	8000e96 <TIM_Base_SetConfig+0xb2>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a29      	ldr	r2, [pc, #164]	; (8000f08 <TIM_Base_SetConfig+0x124>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d017      	beq.n	8000e96 <TIM_Base_SetConfig+0xb2>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a28      	ldr	r2, [pc, #160]	; (8000f0c <TIM_Base_SetConfig+0x128>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <TIM_Base_SetConfig+0xb2>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <TIM_Base_SetConfig+0x12c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00f      	beq.n	8000e96 <TIM_Base_SetConfig+0xb2>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a26      	ldr	r2, [pc, #152]	; (8000f14 <TIM_Base_SetConfig+0x130>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00b      	beq.n	8000e96 <TIM_Base_SetConfig+0xb2>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a25      	ldr	r2, [pc, #148]	; (8000f18 <TIM_Base_SetConfig+0x134>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <TIM_Base_SetConfig+0xb2>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a24      	ldr	r2, [pc, #144]	; (8000f1c <TIM_Base_SetConfig+0x138>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d003      	beq.n	8000e96 <TIM_Base_SetConfig+0xb2>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <TIM_Base_SetConfig+0x13c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d108      	bne.n	8000ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <TIM_Base_SetConfig+0x114>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d003      	beq.n	8000edc <TIM_Base_SetConfig+0xf8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <TIM_Base_SetConfig+0x124>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d103      	bne.n	8000ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	615a      	str	r2, [r3, #20]
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40010000 	.word	0x40010000
 8000efc:	40000400 	.word	0x40000400
 8000f00:	40000800 	.word	0x40000800
 8000f04:	40000c00 	.word	0x40000c00
 8000f08:	40010400 	.word	0x40010400
 8000f0c:	40014000 	.word	0x40014000
 8000f10:	40014400 	.word	0x40014400
 8000f14:	40014800 	.word	0x40014800
 8000f18:	40001800 	.word	0x40001800
 8000f1c:	40001c00 	.word	0x40001c00
 8000f20:	40002000 	.word	0x40002000

08000f24 <__libc_init_array>:
 8000f24:	b570      	push	{r4, r5, r6, lr}
 8000f26:	4e0d      	ldr	r6, [pc, #52]	; (8000f5c <__libc_init_array+0x38>)
 8000f28:	4c0d      	ldr	r4, [pc, #52]	; (8000f60 <__libc_init_array+0x3c>)
 8000f2a:	1ba4      	subs	r4, r4, r6
 8000f2c:	10a4      	asrs	r4, r4, #2
 8000f2e:	2500      	movs	r5, #0
 8000f30:	42a5      	cmp	r5, r4
 8000f32:	d109      	bne.n	8000f48 <__libc_init_array+0x24>
 8000f34:	4e0b      	ldr	r6, [pc, #44]	; (8000f64 <__libc_init_array+0x40>)
 8000f36:	4c0c      	ldr	r4, [pc, #48]	; (8000f68 <__libc_init_array+0x44>)
 8000f38:	f000 f818 	bl	8000f6c <_init>
 8000f3c:	1ba4      	subs	r4, r4, r6
 8000f3e:	10a4      	asrs	r4, r4, #2
 8000f40:	2500      	movs	r5, #0
 8000f42:	42a5      	cmp	r5, r4
 8000f44:	d105      	bne.n	8000f52 <__libc_init_array+0x2e>
 8000f46:	bd70      	pop	{r4, r5, r6, pc}
 8000f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f4c:	4798      	blx	r3
 8000f4e:	3501      	adds	r5, #1
 8000f50:	e7ee      	b.n	8000f30 <__libc_init_array+0xc>
 8000f52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f56:	4798      	blx	r3
 8000f58:	3501      	adds	r5, #1
 8000f5a:	e7f2      	b.n	8000f42 <__libc_init_array+0x1e>
 8000f5c:	08000f84 	.word	0x08000f84
 8000f60:	08000f84 	.word	0x08000f84
 8000f64:	08000f84 	.word	0x08000f84
 8000f68:	08000f88 	.word	0x08000f88

08000f6c <_init>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr

08000f78 <_fini>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr
